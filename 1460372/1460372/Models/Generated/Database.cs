



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `BookStoreConnection`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=YURIHONJO\HONTO;Initial Catalog=BookStore;User ID=sa;Password=wendy`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace BookStoreConnection
{

	public partial class BookStoreConnectionDB : Database
	{
		public BookStoreConnectionDB() 
			: base("BookStoreConnection")
		{
			CommonConstruct();
		}

		public BookStoreConnectionDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			BookStoreConnectionDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static BookStoreConnectionDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new BookStoreConnectionDB();
        }

		[ThreadStatic] static BookStoreConnectionDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static BookStoreConnectionDB repo { get { return BookStoreConnectionDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("dbo._Order")]



	[PrimaryKey("recID")]




	[ExplicitColumns]

    public partial class _Order : BookStoreConnectionDB.Record<_Order>  
    {



		[Column] public int recID { get; set; }





		[Column] public int ID_Customer { get; set; }





		[Column] public DateTime? OrderDate { get; set; }





		[Column] public decimal? OrderValue { get; set; }





		[Column] public int? OrderStatus { get; set; }



	}

    

	[TableName("dbo.Account")]



	[PrimaryKey("recID")]




	[ExplicitColumns]

    public partial class Account : BookStoreConnectionDB.Record<Account>  
    {



		[Column] public int recID { get; set; }





		[Column] public string username { get; set; }





		[Column] public string pass { get; set; }





		[Column] public int? isDelete { get; set; }



	}

    

	[TableName("dbo.Author")]



	[PrimaryKey("recID")]




	[ExplicitColumns]

    public partial class Author : BookStoreConnectionDB.Record<Author>  
    {



		[Column] public int recID { get; set; }





		[Column] public string Name { get; set; }



	}

    

	[TableName("dbo.Availablity")]



	[PrimaryKey("recID")]




	[ExplicitColumns]

    public partial class Availablity : BookStoreConnectionDB.Record<Availablity>  
    {



		[Column] public int recID { get; set; }





		[Column] public string Name { get; set; }



	}

    

	[TableName("dbo.Book")]



	[PrimaryKey("recID")]




	[ExplicitColumns]

    public partial class Book : BookStoreConnectionDB.Record<Book>  
    {



		[Column] public int recID { get; set; }





		[Column] public string Name { get; set; }





		[Column] public int? ID_Author { get; set; }





		[Column] public int? ID_Series { get; set; }





		[Column] public string Summary { get; set; }





		[Column] public string Publisher { get; set; }





		[Column] public DateTime? ReleasedDate { get; set; }





		[Column] public decimal? Price { get; set; }





		[Column] public string FrontCover { get; set; }





		[Column] public int? isDelete { get; set; }



	}

    

	[TableName("dbo.Customer")]



	[PrimaryKey("recID")]




	[ExplicitColumns]

    public partial class Customer : BookStoreConnectionDB.Record<Customer>  
    {



		[Column] public int recID { get; set; }





		[Column] public string Name { get; set; }





		[Column] public string _Address { get; set; }





		[Column] public string PhoneNumber { get; set; }





		[Column] public int? ID_account { get; set; }



	}

    

	[TableName("dbo.Genre")]



	[PrimaryKey("recID")]




	[ExplicitColumns]

    public partial class Genre : BookStoreConnectionDB.Record<Genre>  
    {



		[Column] public int recID { get; set; }





		[Column] public string Name { get; set; }



	}

    

	[TableName("dbo.GenreBook")]



	[PrimaryKey("ID_Book", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class GenreBook : BookStoreConnectionDB.Record<GenreBook>  
    {



		[Column] public int ID_Book { get; set; }





		[Column] public int ID_Genre { get; set; }



	}

    

	[TableName("dbo.OrderDetail")]



	[PrimaryKey("ID_Order", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class OrderDetail : BookStoreConnectionDB.Record<OrderDetail>  
    {



		[Column] public int ID_Order { get; set; }





		[Column] public int ID_Book { get; set; }





		[Column] public int? Quantity { get; set; }





		[Column] public decimal? Price { get; set; }





		[Column] public decimal? Total { get; set; }



	}

    

	[TableName("dbo.OrderStatus")]



	[PrimaryKey("recID")]




	[ExplicitColumns]

    public partial class OrderStatus : BookStoreConnectionDB.Record<OrderStatus>  
    {



		[Column] public int recID { get; set; }





		[Column] public string Name { get; set; }



	}

    

	[TableName("dbo.Review")]



	[PrimaryKey("recID")]




	[ExplicitColumns]

    public partial class Review : BookStoreConnectionDB.Record<Review>  
    {



		[Column] public int recID { get; set; }





		[Column] public int ID_Book { get; set; }





		[Column] public int ID_Customer { get; set; }





		[Column] public string Comment { get; set; }





		[Column] public DateTime? _Date { get; set; }



	}

    

	[TableName("dbo.StatusBook")]



	[PrimaryKey("ID_Book", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class StatusBook : BookStoreConnectionDB.Record<StatusBook>  
    {



		[Column] public int ID_Book { get; set; }





		[Column] public int ID_Availablity { get; set; }



	}


}
